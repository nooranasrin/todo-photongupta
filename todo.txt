*Data structure:
                                   -----TODO APP-----
//Array of objects
[                         
  {
    id:"id",
    title:"t1",            //string
    todoList:              //array of objects

    [{
       todo:"todo",        //string
       isDone:false,       //boolean  
       date:date,           //object
       id:"id"             
      },
     {
       todo:"todo",
       isDone:false,
       date:date,
       id:"id"
      }]
   },

  {
    id:"id", 
    title:"t2",
    todoList:
    [{
       todo:"todo",
       isDone:false,
       date:date,
       id:"id"
      },
     {
       todo:"todo",
       isDone:false,
       date:date,
       id:"id"
      }]
   }   
]

✅1=>setup the environment 
tree
|
|-lib
|  |-app.js   
|-server.js
|-test
|  |-appTest.js
|-todo.txt
|-README.md
|-public
|  |-scripts
|  |-img
|  |-css 
|  |-index.html
|-dataBase
   |-todoList.json 

2=>make the home page
✅2.1 make the home page with todo heading
✅2.2 on home page there will be an option of adding new todo
✅2.3 Allow user to add a new todo on clicking the add option
✅.4 every new todo should have a title and detail of to do list

3=>make sure that all todo list should save in json (array of objects)
✅3.1 every new todo should be in the form of objects
✅3.2 after adding the new todo, the todo should store in the json file 
✅3.3 todo stored in the json should be in the form of array of the objects 
✅3.4 after adding the new todo new todo should appear on the todoList page
✅3.5 only the title should appear on the todoList page
✅3.6 allow user to see the detail of todo after clicking on the particular todo title


4=>add a mark to show whether the work is done or pending
✅4.1 allow user to add the mark on todo list in order to show whether the work is done or pending 
✅4.2 the mark should appear with the item

5=>provide delete option in the particular todo item
✅5.1 In every todo item provide a delete option 
✅5.2 allow the user to delete an item from todo
✅5.3 after deleting the item, that item shouldn't appear in the detail of that todo

6=>provide a option to delete the todo 
✅6.1 add the option to delete the particular todo  
✅6.2 after deleting that todo , todo shouldn't appear in the todoList

✅7=>add na option which shows how many items are left to complete

✅8=> provide an option to add the items in the existing todo

✅9=>add the feature of searching the todo by their title name

✅10=>extract the different classes into different files

✅11=>separate the parseBody into functions according to  the responsibility

✅12=>replace all the repeating code in classes

✅13=>extract frontend code into separate files based on responsibility

✅14=>make a generic function for xmlhttprequest

✅15=> make a function to generate id for todo and todo items

✅16=>change the template into home.html

✅17=>remove unwanted files

✅18=>rename the file

✅19=>handle client side errors

✅20=> change the content type into application/json

✅21=>provide validation for bad request

✅22=>inject sendResponse method into the response

=> write integration test

=> write unit test 

=> ask for confirmation for deleting items and todoList



